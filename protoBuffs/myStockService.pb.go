// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: myStockService.proto

package protoBuffs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StockSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *StockSymbol) Reset() {
	*x = StockSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myStockService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSymbol) ProtoMessage() {}

func (x *StockSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_myStockService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSymbol.ProtoReflect.Descriptor instead.
func (*StockSymbol) Descriptor() ([]byte, []int) {
	return file_myStockService_proto_rawDescGZIP(), []int{0}
}

func (x *StockSymbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type StockName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StockName) Reset() {
	*x = StockName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myStockService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockName) ProtoMessage() {}

func (x *StockName) ProtoReflect() protoreflect.Message {
	mi := &file_myStockService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockName.ProtoReflect.Descriptor instead.
func (*StockName) Descriptor() ([]byte, []int) {
	return file_myStockService_proto_rawDescGZIP(), []int{1}
}

func (x *StockName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TheStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price  int32  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TheStock) Reset() {
	*x = TheStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myStockService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheStock) ProtoMessage() {}

func (x *TheStock) ProtoReflect() protoreflect.Message {
	mi := &file_myStockService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheStock.ProtoReflect.Descriptor instead.
func (*TheStock) Descriptor() ([]byte, []int) {
	return file_myStockService_proto_rawDescGZIP(), []int{2}
}

func (x *TheStock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TheStock) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TheStock) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type TheStockPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price int32 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TheStockPrice) Reset() {
	*x = TheStockPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myStockService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TheStockPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheStockPrice) ProtoMessage() {}

func (x *TheStockPrice) ProtoReflect() protoreflect.Message {
	mi := &file_myStockService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheStockPrice.ProtoReflect.Descriptor instead.
func (*TheStockPrice) Descriptor() ([]byte, []int) {
	return file_myStockService_proto_rawDescGZIP(), []int{3}
}

func (x *TheStockPrice) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_myStockService_proto protoreflect.FileDescriptor

var file_myStockService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x1f, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c,
	0x0a, 0x08, 0x74, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x0d,
	0x74, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x32, 0xef, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a,
	0x18, 0x2e, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e,
	0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x18, 0x2e, 0x6d, 0x79, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x68, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x1a, 0x1d, 0x2e, 0x6d, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x75, 0x66, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_myStockService_proto_rawDescOnce sync.Once
	file_myStockService_proto_rawDescData = file_myStockService_proto_rawDesc
)

func file_myStockService_proto_rawDescGZIP() []byte {
	file_myStockService_proto_rawDescOnce.Do(func() {
		file_myStockService_proto_rawDescData = protoimpl.X.CompressGZIP(file_myStockService_proto_rawDescData)
	})
	return file_myStockService_proto_rawDescData
}

var file_myStockService_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_myStockService_proto_goTypes = []interface{}{
	(*StockSymbol)(nil),   // 0: myStockService.StockSymbol
	(*StockName)(nil),     // 1: myStockService.StockName
	(*TheStock)(nil),      // 2: myStockService.theStock
	(*TheStockPrice)(nil), // 3: myStockService.theStockPrice
}
var file_myStockService_proto_depIdxs = []int32{
	0, // 0: myStockService.Stocks.GetStockBySymbol:input_type -> myStockService.StockSymbol
	1, // 1: myStockService.Stocks.GetStockbyName:input_type -> myStockService.StockName
	0, // 2: myStockService.Stocks.GetStockPrice:input_type -> myStockService.StockSymbol
	2, // 3: myStockService.Stocks.GetStockBySymbol:output_type -> myStockService.theStock
	2, // 4: myStockService.Stocks.GetStockbyName:output_type -> myStockService.theStock
	3, // 5: myStockService.Stocks.GetStockPrice:output_type -> myStockService.theStockPrice
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_myStockService_proto_init() }
func file_myStockService_proto_init() {
	if File_myStockService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_myStockService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_myStockService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_myStockService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_myStockService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TheStockPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_myStockService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_myStockService_proto_goTypes,
		DependencyIndexes: file_myStockService_proto_depIdxs,
		MessageInfos:      file_myStockService_proto_msgTypes,
	}.Build()
	File_myStockService_proto = out.File
	file_myStockService_proto_rawDesc = nil
	file_myStockService_proto_goTypes = nil
	file_myStockService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StocksClient is the client API for Stocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StocksClient interface {
	GetStockBySymbol(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (*TheStock, error)
	GetStockbyName(ctx context.Context, in *StockName, opts ...grpc.CallOption) (*TheStock, error)
	GetStockPrice(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (Stocks_GetStockPriceClient, error)
}

type stocksClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksClient(cc grpc.ClientConnInterface) StocksClient {
	return &stocksClient{cc}
}

func (c *stocksClient) GetStockBySymbol(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (*TheStock, error) {
	out := new(TheStock)
	err := c.cc.Invoke(ctx, "/myStockService.Stocks/GetStockBySymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksClient) GetStockbyName(ctx context.Context, in *StockName, opts ...grpc.CallOption) (*TheStock, error) {
	out := new(TheStock)
	err := c.cc.Invoke(ctx, "/myStockService.Stocks/GetStockbyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksClient) GetStockPrice(ctx context.Context, in *StockSymbol, opts ...grpc.CallOption) (Stocks_GetStockPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stocks_serviceDesc.Streams[0], "/myStockService.Stocks/GetStockPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &stocksGetStockPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stocks_GetStockPriceClient interface {
	Recv() (*TheStockPrice, error)
	grpc.ClientStream
}

type stocksGetStockPriceClient struct {
	grpc.ClientStream
}

func (x *stocksGetStockPriceClient) Recv() (*TheStockPrice, error) {
	m := new(TheStockPrice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StocksServer is the server API for Stocks service.
type StocksServer interface {
	GetStockBySymbol(context.Context, *StockSymbol) (*TheStock, error)
	GetStockbyName(context.Context, *StockName) (*TheStock, error)
	GetStockPrice(*StockSymbol, Stocks_GetStockPriceServer) error
}

// UnimplementedStocksServer can be embedded to have forward compatible implementations.
type UnimplementedStocksServer struct {
}

func (*UnimplementedStocksServer) GetStockBySymbol(context.Context, *StockSymbol) (*TheStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockBySymbol not implemented")
}
func (*UnimplementedStocksServer) GetStockbyName(context.Context, *StockName) (*TheStock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockbyName not implemented")
}
func (*UnimplementedStocksServer) GetStockPrice(*StockSymbol, Stocks_GetStockPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockPrice not implemented")
}

func RegisterStocksServer(s *grpc.Server, srv StocksServer) {
	s.RegisterService(&_Stocks_serviceDesc, srv)
}

func _Stocks_GetStockBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServer).GetStockBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myStockService.Stocks/GetStockBySymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServer).GetStockBySymbol(ctx, req.(*StockSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stocks_GetStockbyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServer).GetStockbyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myStockService.Stocks/GetStockbyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServer).GetStockbyName(ctx, req.(*StockName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stocks_GetStockPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StocksServer).GetStockPrice(m, &stocksGetStockPriceServer{stream})
}

type Stocks_GetStockPriceServer interface {
	Send(*TheStockPrice) error
	grpc.ServerStream
}

type stocksGetStockPriceServer struct {
	grpc.ServerStream
}

func (x *stocksGetStockPriceServer) Send(m *TheStockPrice) error {
	return x.ServerStream.SendMsg(m)
}

var _Stocks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myStockService.Stocks",
	HandlerType: (*StocksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockBySymbol",
			Handler:    _Stocks_GetStockBySymbol_Handler,
		},
		{
			MethodName: "GetStockbyName",
			Handler:    _Stocks_GetStockbyName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockPrice",
			Handler:       _Stocks_GetStockPrice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "myStockService.proto",
}
